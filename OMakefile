rootdir = $(dir .)

VERSION		= 1.0
DATE		= $(shell date $'+%B %d, %G')

HAVE_THREADS	= 1
USE_CYC_TLS	= 0

LIBCOMPILER	= $(rootdir)/library/compiler/libcompiler.so
LIBSTDLIB	= $(rootdir)/library/stdlib/libstdlib.so
LIBCYCRT	= $(rootdir)/library/runtime/libcycrt.so

LIBCYC		= $(LIBCYCRT)
LIBCYC_BOOT	= $(LIBCYCRT)

BUILDLIB	= $(rootdir)/tools/buildlib/buildlib
CYCBISON	= $(rootdir)/tools/bison/cycbison
CYCLEX		= $(rootdir)/tools/cyclex/cyclex
CYCLONE		= $(rootdir)/tools/cyclone/cyclone
CYCDOC		= $(rootdir)/tools/cycdoc/cycdoc
ERRORGEN	= $(rootdir)/tools/errorgen/errorgen
STRINGIFY	= $(rootdir)/tools/stringify/stringify
BANSHEE		= $(rootdir)/tools/banshee/banshee.native

CYCSPECS	= $(rootdir)/library/stdlib/cyc-lib/cycspecs

link (lib) =
  LDFLAGS[] +=
    -L$(rootdir)/library/$(lib)
    -Wl,-rpath,$(absname $(rootdir)/library/$(lib))
    -l$(lib)

  LDFLAGS_BOOT[] +=
    -L$(rootdir)/boot/library/$(lib)
    -Wl,-rpath,$(absname $(rootdir)/boot/library/$(lib))
    -l$(lib).boot

  LIBCYC[] +=
    $(rootdir)/library/$(lib)/lib$(lib).so

  LIBCYC_BOOT[] +=
    $(rootdir)/boot/library/$(lib)/lib$(lib).boot.so

  CYCFLAGS[] +=
    -I$(rootdir)/library/$(lib)

  export


CYCFLAGS[] =
  #-noexpandtypedefs
  #-nochecks
  #-nonullchecks
  #-noboundschecks
  --geninterface
  --better-widen
  #--cifc-inst-tvar
  #--warnassert
  #-warnaliascoercion
  #-warnregioncoerce
  #-Wlose-unique
  #--unprovable
  #--no-lower
  -I$(rootdir)/library/stdlib/libc

LDFLAGS[] =
  -L$(rootdir)/library/runtime
  -Wl,-rpath,$(absname $(rootdir)/library/runtime)
  -lcycrt
LDFLAGS_BOOT = $(LDFLAGS)


########################################################################
############################## C compiler ##############################
########################################################################

CFLAGS[] =
  -m32
  -ggdb3
  -I$(rootdir)/library/runtime
  -I$(rootdir)/library/stdlib/cyc-lib

PTHREAD_LDFLAGS[] = $(EMPTY_ARRAY)
if $(HAVE_THREADS):
   CFLAGS		+= -D_HAVE_PTHREAD_
   PTHREAD_LDFLAGS	+= -lpthread
   export
elseif $(USE_CYC_TLS):
   CFLAGS		+= -DUSE_CYC_TLS


.SCANNER: scan-%.c: %.c
  cc $(CFLAGS) $< -MM

%.o: %.c $(rootdir)/library/stdlib/cyc-lib/cyc_include.h :scanner: scan-%.c
  cc $(CFLAGS) $< -c -o $@

%.boot: %.c
  cc $(CFLAGS) $< -o $@


########################################################################
############################## Boot stuff ##############################
########################################################################

srcname (name) =
  name = $(fullname $(name))
  match $(name)
  case $"^$(fullname $(rootdir))/\(.+\)$$":
    value $1
  case $"^$(fullname $(rootdir))$$":
    value .
  default:
    value $(name)
 

abs_srcname (name) =
  absname ($(top_srcdir)/$(srcname $(name)))
 

bootname (name) =
  SUFF = $(suffix $(name))
  switch $(SUFF)
  case:
  case $".so":
    name = $(removesuffix $(name)).boot$(SUFF)
    export
  value $(file $(addprefix $(rootdir)/boot/$(srcname .)/, $(name)))

bootnames (names) =
  foreach (name => ..., $(names)):
    bootname ($(name))

boot () =
  boot-dirs = $(bootnames $(set $(dirname $(OBJECTS))))

  boot: $(addsuffix .c, $(removesuffix $(OBJECTS)))
    #rm -rf $(boot-dirs)
    foreach (source => ..., $^):
      target = $(bootname $(source))
      mkdir -p $(dirname $(target))
      cp $(source) $(target)

.PHONY: boot

.SUBDIRS: $(subdirs PC, boot)
  value


########################################################################
########################### Cyclone compiler ###########################
########################################################################

private.cyclone-rules (boot) =
  if $(boot):
    LIBCOMPILER	= $(bootname $(LIBCOMPILER))
    LIBSTDLIB	= $(bootname $(LIBSTDLIB))
    CYCLONE	= $(bootname $(CYCLONE)).boot
    CYCLEX	= $(bootname $(CYCLEX)).boot
    CYCBISON	= $(bootname $(CYCBISON)).boot
    BUILDLIB	= $(bootname $(BUILDLIB)).boot
    export

  LIBS = $(LIBCOMPILER) $(LIBSTDLIB) $(LIBCYCRT)

  .SCANNER: scan-%.cyc: %.cyc $(CYCLONE) $(CYCSPECS) $(LIBS)
    $(CYCLONE) $(CYCFLAGS) $< -M -MT $(removesuffix $<).c

  %.c %.cyci: %.cyc $(CYCLONE) $(CYCSPECS) $(LIBS) :scanner: scan-%.cyc
    $(CYCLONE) $(CYCFLAGS) -stopafter-toc $< -o $*.c

  %.cyc: %.cyl $(CYCLEX) $(LIBSTDLIB)
    $(CYCLEX) $< $@

  %_tab.cyc %_tab.h: %.cyy $(CYCBISON) $(LIBSTDLIB)
    $(CYCBISON) -d $< -o $*.cyc

  %_gen.h: %.err.cyc $(ERRORGEN) $(CYCLONE) $(LIBSTDLIB)
    $(ERRORGEN) -c $(CYCLONE) $< > $@

  export


program (name) =
  $(name): $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) $(LDFLAGS)

  .DEFAULT: $(name)

  if $(defined HEADERS):
    .DEFAULT: $(HEADERS)

  cyclone-rules (false)
  export


library () =
  private.name = $(basename $(fullname .))

  lib$(name).so: $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) -shared -Wl,-z,defs $(LDFLAGS)

  if $(defined HEADERS):
    .DEFAULT: $(HEADERS)

  cyclone-rules (false)
  export


boot-program (name) =
  boot ()

  $(name): $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) $(LDFLAGS)

  .SUBDIRS: $(bootname .)
    $(name).boot: $(OBJECTS) $(LIBCYC_BOOT)
      cc -m32 -o $@ $(OBJECTS) $(LDFLAGS_BOOT)

  .DEFAULT: $(name)

  if $(defined HEADERS):
    .DEFAULT: $(HEADERS)

  cyclone-rules (true)
  export


boot-library () =
  private.name = $(basename $(fullname .))

  boot ()

  lib$(name).so: $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) -shared -Wl,-z,defs $(LDFLAGS)

  .SUBDIRS: $(bootname .)
    lib$(name).boot.so: $(OBJECTS) $(LIBCYC_BOOT)
      cc -m32 -o $@ $(OBJECTS) -shared -Wl,-z,defs $(LDFLAGS_BOOT)

  if $(defined HEADERS):
    .DEFAULT: $(HEADERS)

  cyclone-rules (true)
  export
    

buildlib (cys) =
  STUBS[] =
    $(file $(cys)/cstubs.c)
    $(file $(cys)/cycstubs.cyc)

  mkdir -p $(cys)

  clean:
    rm -r $(cys)

  .SCANNER: scan-%.cyc: $(STUBS)

  .SUBDIRS: $(cys)
    $(STUBS): ../$(cys).cys $(BUILDLIB) $(LIBS)
      $(BUILDLIB) -d . $<

    %.h: $(STUBS)
      value

  export .RULE


########################################################################
########################### Code generation ############################
########################################################################

%.string.cyc: % $(STRINGIFY)
  $(STRINGIFY) $< > $@

%.c %.h: %.bsp $(BANSHEE)
  $(BANSHEE) $< $*
  if $(file-exists $(HOME)/.uncrustify.cfg):
    uncrustify --no-backup -lC -q $*.c $*.h

.SCANNER: %.pdf: %.tex
  awk ($<)
  case $'\\input\{\([^}]*\)\}':
    echo $"$@: $1.tex"
  if $(file-exists $*.bib):
    echo $"$@: $*.bib"

%.pdf: %.tex
  rubber --pdf $<
  rubber --clean $<

########################################################################

.PHONY: clean

clean:
  rm $(filter-proper-targets $(find . -name *))
  rm $(shell find . -name $"*.omc")

########################################################################

.PHONY: check
.DEFAULT: check

.SUBDIRS: doc library tools testsuite
