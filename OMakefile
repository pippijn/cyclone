rootdir = $(dir .)

VERSION		= 1.0
DATE		= $(shell date $'+%B %d, %G')

HAVE_THREADS	= 0
USE_CYC_TLS	= 0

BUILDLIB	= $(rootdir)/boot/tools/buildlib/buildlib.boot
CYCBISON	= $(rootdir)/boot/tools/bison/cycbison.boot
CYCLEX		= $(rootdir)/boot/tools/cyclex/cyclex.boot
CYCLONE_BOOT	= $(rootdir)/boot/tools/cyclone/cyclone.boot
CYCLONE		= $(rootdir)/tools/cyclone/cyclone
CYCDOC		= $(rootdir)/tools/cycdoc/cycdoc
ERRORGEN	= $(rootdir)/tools/errorgen/errorgen
STRINGIFY	= $(rootdir)/tools/stringify/stringify
BANSHEE		= $(rootdir)/tools/banshee/banshee.native

CYCSPECS	= $(rootdir)/library/stdlib/cyc-lib/cycspecs

LIBCYCRT	= $(rootdir)/library/runtime/libcycrt.so
LIBCYC		= $(rootdir)/library/stdlib/libcyc.so $(LIBCYCRT)
LIBCYC_BOOT	= $(rootdir)/boot/library/stdlib/libcyc.boot.so $(LIBCYCRT)

link (lib) =
  LDFLAGS[] +=
    -L$(rootdir)/library/$(lib)
    -Wl,-rpath,$(absname $(rootdir)/library/$(lib))

  LDFLAGS_BOOT[] +=
    -L$(rootdir)/boot/library/$(lib)
    -Wl,-rpath,$(absname $(rootdir)/boot/library/$(lib))

  CYCFLAGS[] +=
    -I$(rootdir)/library/$(lib)

  export LDFLAGS LDFLAGS_BOOT CYCFLAGS


CYCFLAGS[] =
  #--geninterface
  -I$(rootdir)/library/stdlib/libc

LDFLAGS[] =
  -L$(rootdir)/library/runtime
  -Wl,-rpath,$(absname $(rootdir)/library/runtime)
  -lcycrt
LDFLAGS_BOOT = $(LDFLAGS)

link (stdlib)


########################################################################
############################## C compiler ##############################
########################################################################

CFLAGS[] =
  -m32
  -ggdb3
  -I$(rootdir)/library/runtime
  -I$(rootdir)/library/stdlib/cyc-lib

PTHREAD_LDFLAGS[] = $(EMPTY_ARRAY)
if $(HAVE_THREADS):
   CFLAGS		+= -D_HAVE_PTHREAD_
   PTHREAD_LDFLAGS	+= -lpthread
   export
elseif $(USE_CYC_TLS):
   CFLAGS		+= -DUSE_CYC_TLS


.SCANNER: scan-%.c: %.c
  cc $(CFLAGS) $< -MM

%.o: %.c $(rootdir)/library/stdlib/cyc-lib/cyc_include.h :scanner: scan-%.c
  cc $(CFLAGS) $< -c -o $@

%.boot: %.c
  cc $(CFLAGS) $< -o $@


########################################################################
############################## Boot stuff ##############################
########################################################################

bootname (name) =
  file ($(addprefix $(rootdir)/boot/$(fullname .)/,$(name)))

boot () =
  boot-dirs = $(bootname $(set $(dirname $(OBJECTS))))

  boot: $(addsuffix .c, $(removesuffix $(OBJECTS)))
    #rm -rf $(boot-dirs)
    foreach (source => ..., $^):
      target = $(bootname $(source))
      mkdir -p $(dirname $(target))
      cp $(source) $(target)

.PHONY: boot

.SUBDIRS: $(subdirs PC, boot)
  value


########################################################################
########################### Cyclone compiler ###########################
########################################################################

.SCANNER: scan-%.cyc: %.cyc $(CYCLONE_BOOT) $(CYCSPECS)
  $(CYCLONE_BOOT) $(CYCFLAGS) $< -M -MT $(removesuffix $<).c

%.c: %.cyc $(CYCLONE_BOOT) $(CYCSPECS) :scanner: scan-%.cyc
  $(CYCLONE_BOOT) $(CYCFLAGS) -stopafter-toc $< -o $@


########################################################################
########################### Code generation ############################
########################################################################

%.cyc: %.cyl $(CYCLEX)
  $(CYCLEX) $< $@

%_tab.cyc %_tab.h: %.cyy $(CYCBISON)
  $(CYCBISON) -d $< -o $*.cyc

%_gen.h: %.err.cyc $(ERRORGEN) $(bootname $(CYCLONE)).boot
  $(ERRORGEN) -c $(bootname $(CYCLONE)).boot $< > $@

%.string.cyc: % $(STRINGIFY)
  $(STRINGIFY) $< > $@

%.c %.h: %.bsp $(BANSHEE)
  $(BANSHEE) $< $*
  uncrustify --no-backup -lC -q $*.c $*.h

%.pdf: %.tex
  rubber --pdf $<
  rubber --clean $<

########################################################################

.PHONY: check
.DEFAULT: check

.SUBDIRS: doc library tools testsuite

########################################################################

.PHONY: clean

clean:
  rm $(filter-proper-targets $(find . -name *))
