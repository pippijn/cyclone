rootdir = $(dir .)

VERSION		= 1.0
DATE		= $(shell date $'+%B %d, %G')

HAVE_THREADS	= 0
USE_CYC_TLS	= 0

BUILDLIB	= $(rootdir)/tools/buildlib/buildlib
CYCBISON	= $(rootdir)/tools/bison/cycbison
CYCLEX		= $(rootdir)/tools/cyclex/cyclex
CYCLONE		= $(rootdir)/tools/cyclone/cyclone
CYCDOC		= $(rootdir)/tools/cycdoc/cycdoc
ERRORGEN	= $(rootdir)/tools/errorgen/errorgen
STRINGIFY	= $(rootdir)/tools/stringify/stringify
BANSHEE		= $(rootdir)/tools/banshee/banshee.native

CYCSPECS	= $(rootdir)/library/stdlib/cyc-lib/cycspecs

LIBCYCRT	= $(rootdir)/library/runtime/libcycrt.so
LIBCYC		= $(LIBCYCRT)
LIBCYC_BOOT	= $(LIBCYCRT)

link (lib) =
  LDFLAGS[] +=
    -L$(rootdir)/library/$(lib)
    -Wl,-rpath,$(absname $(rootdir)/library/$(lib))
    -l$(lib)

  LDFLAGS_BOOT[] +=
    -L$(rootdir)/boot/library/$(lib)
    -Wl,-rpath,$(absname $(rootdir)/boot/library/$(lib))
    -l$(lib).boot

  LIBCYC[] +=
    $(rootdir)/library/$(lib)/lib$(lib).so

  LIBCYC_BOOT[] +=
    $(rootdir)/boot/library/$(lib)/lib$(lib).boot.so

  CYCFLAGS[] +=
    -I$(rootdir)/library/$(lib)

  export LDFLAGS LDFLAGS_BOOT CYCFLAGS LIBCYC LIBCYC_BOOT


CYCFLAGS[] =
  --geninterface
  #-noexpandtypedefs
  #-nonullchecks
  #--no-lower
  -I$(rootdir)/library/stdlib/libc

LDFLAGS[] =
  -flto
  -Werror
  -L$(rootdir)/library/runtime
  -Wl,-rpath,$(absname $(rootdir)/library/runtime)
  -lcycrt
LDFLAGS_BOOT = $(LDFLAGS)


########################################################################
############################## C compiler ##############################
########################################################################

CFLAGS[] =
  -flto
  -m32
  -ggdb3
  -I$(rootdir)/library/runtime
  -I$(rootdir)/library/stdlib/cyc-lib

PTHREAD_LDFLAGS[] = $(EMPTY_ARRAY)
if $(HAVE_THREADS):
   CFLAGS		+= -D_HAVE_PTHREAD_
   PTHREAD_LDFLAGS	+= -lpthread
   export
elseif $(USE_CYC_TLS):
   CFLAGS		+= -DUSE_CYC_TLS


.SCANNER: scan-%.c: %.c
  cc $(CFLAGS) $< -MM

%.o: %.c $(rootdir)/library/stdlib/cyc-lib/cyc_include.h :scanner: scan-%.c
  cc $(CFLAGS) $< -c -o $@

%.boot: %.c
  cc $(CFLAGS) $< -o $@


########################################################################
############################## Boot stuff ##############################
########################################################################

bootname (name) =
  file ($(addprefix $(rootdir)/boot/$(fullname .)/,$(name)))

boot () =
  boot-dirs = $(bootname $(set $(dirname $(OBJECTS))))

  boot: $(addsuffix .c, $(removesuffix $(OBJECTS)))
    #rm -rf $(boot-dirs)
    foreach (source => ..., $^):
      target = $(bootname $(source))
      mkdir -p $(dirname $(target))
      cp $(source) $(target)

.PHONY: boot

.SUBDIRS: $(subdirs PC, boot)
  value


########################################################################
########################### Cyclone compiler ###########################
########################################################################

private.cyclone-rules (boot) =
  if $(boot):
    CYCLONE	= $(bootname $(CYCLONE)).boot
    CYCLEX	= $(bootname $(CYCLEX)).boot
    CYCBISON	= $(bootname $(CYCBISON)).boot
    BUILDLIB	= $(bootname $(BUILDLIB)).boot
    export

  .SCANNER: scan-%.cyc: %.cyc $(CYCLONE) $(CYCSPECS)
    $(CYCLONE) $(CYCFLAGS) $< -M -MT $(removesuffix $<).c

  %.c: %.cyc $(CYCLONE) $(CYCSPECS) :scanner: scan-%.cyc
    $(CYCLONE) $(CYCFLAGS) -stopafter-toc $< -o $@

  %.cyc: %.cyl $(CYCLEX)
    $(CYCLEX) $< $@

  %_tab.cyc %_tab.h: %.cyy $(CYCBISON)
    $(CYCBISON) -d $< -o $*.cyc

  %_gen.h: %.err.cyc $(ERRORGEN) $(CYCLONE)
    $(ERRORGEN) -c $(CYCLONE) $< > $@

  export


program (name) =
  $(name): $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) $(LDFLAGS)

  .DEFAULT: $(name)

  cyclone-rules (false)
  export


library () =
  private.name = $(basename $(fullname .))

  lib$(name).so: $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) -shared -Wl,-z,defs $(LDFLAGS)

  cyclone-rules (false)
  export


boot-program (name) =
  boot ()

  $(name): $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) $(LDFLAGS)

  .SUBDIRS: $(bootname .)
    $(name).boot: $(OBJECTS) $(LIBCYC_BOOT)
      cc -m32 -o $@ $(OBJECTS) $(LDFLAGS_BOOT)

  .DEFAULT: $(name)

  cyclone-rules (true)
  export


boot-library () =
  private.name = $(basename $(fullname .))

  boot ()

  lib$(name).so: $(OBJECTS) $(LIBCYC)
    cc -m32 -o $@ $(OBJECTS) -shared -Wl,-z,defs $(LDFLAGS)

  .SUBDIRS: $(bootname .)
    lib$(name).boot.so: $(OBJECTS) $(LIBCYC_BOOT)
      cc -m32 -o $@ $(OBJECTS) -shared -Wl,-z,defs $(LDFLAGS_BOOT)

  cyclone-rules (true)
  export
    

buildlib (cys) =
  mkdir -p $(cys)

  clean:
    rm -r $(cys)

  .SUBDIRS: $(cys)
    STUBS[] =
      cstubs.c
      cycstubs.cyc

    $(STUBS): ../$(cys).cys $(BUILDLIB)
      $(BUILDLIB) -d . $<

    %: $(STUBS)


########################################################################
########################### Code generation ############################
########################################################################

%.string.cyc: % $(STRINGIFY)
  $(STRINGIFY) $< > $@

%.c %.h: %.bsp $(BANSHEE)
  $(BANSHEE) $< $*
  uncrustify --no-backup -lC -q $*.c $*.h

%.pdf: %.tex
  rubber --pdf $<
  rubber --clean $<

########################################################################

.PHONY: clean

clean:
  rm $(filter-proper-targets $(find . -name *))
  rm $(shell find . -name $"*.omc")

########################################################################

.PHONY: check
.DEFAULT: check

.SUBDIRS: doc library tools testsuite
