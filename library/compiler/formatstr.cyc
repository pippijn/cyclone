/* Parsing and checking format strings.
   Copyright (C) 2001 AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include "formatstr.h"

#include "kinds.h"
#include "tcutil.h"
#include "warn.h"

#include <string.h>

using Absyn;
using Core;
using List;

namespace Formatstr;

static `a::A *
err_null (seg_t loc, string_t fmt, ... inject parg_t ap)
  __attribute__ ((format (printf, 2, 3)))
{
  Warn::verr (loc, fmt, ap);
  return NULL;
}


struct ConversionSpecification<`r>
{
  list_t<int, `r> flags;
  list_t<int, `r> width;
  list_t<int, `r> precision;
  list_t<int, `r> lenmod;
  char c;
  int j;
};
typedef struct ConversionSpecification<`r> *`r conversion_specification_t<`r>;

// Parse a conversion specification starting at index i in string s.
// s[i] should be the first character after the leading '%'.
// If there is an error, return NULL.
// Otherwise, return the flags, width, precision, and length modifier from s,
// as lists of ints (boxed chars).  Also return the conversion specifier as a
// char, and the index of the character following the conversion specifier.
static struct ConversionSpecification<`r> *`r
parse_conversion_specification (region_t<`r> r, string_t s, int i)
{
#if 0
  fprintf (cyc_stderr, "String: %s\n" "Position: %d\n", s, i);
#endif
  let len = strlen (s);

  if (i < 0 || i >= len)
    return NULL;

  // Parse flags: ['+' '-' ' ' '#' '0']*
  let flags = NULL;
  char c = ' ';
  for (; i < len; i++)
    {
      c = s[i];
      switch (c)
        {
        case '+':
        case '-':
        case ' ':
        case '#':
        case '0':
          flags = rnew (r) List ((int)c, flags);
          continue;
        default:
          break;
        }
      break;
    }
  if (i >= len)
    return NULL;
  flags = imp_rev (flags);

  // Parse width: ('*' | ['0'-'9']+)?
  let width = NULL;
  c = s[i]; // redundant
  if (c == '*')
    {
      width = rnew (r) List ((int)c, width);
      i++;
    }
  else
    for (; i < len; i++)
      {
        c = s[i];
        if (isdigit (c))
          width = rnew (r) List ((int)c, width);
        else
          break;
      }
  if (i >= len)
    return NULL;
  width = imp_rev (width);

  // Parse precision: ('.' ('*' | ['0'-'9']+)? )?
  let precision = NULL;
  c = s[i]; // not redundant
  if (c == '.')
    {
      precision = rnew (r) List ((int)c, precision);
      if (++i >= len)
        return NULL;
      c = s[i];
      if (c == '*')
        {
          precision = rnew (r) List ((int)c, precision);
          i++;
        }
      else
        for (; i < len; i++)
          {
            c = s[i];
            if (isdigit (c))
              precision = rnew (r) List ((int)c, precision);
            else
              break;
          }
    }
  if (i >= len)
    return NULL;
  precision = imp_rev (precision);

  // Parse length modifier:
  //  (['h' 'l' 'j' 'z' 't' 'L'] | 'h' 'h' | 'l' 'l')
  let lenmod = NULL;
  c = s[i]; // not redundant
  switch (c)
    {
    case 'h':
      lenmod = rnew (r) List ((int)c, lenmod);
      if (++i >= len)
        return NULL;
      c = s[i];
      if (c == 'h')
        {
          lenmod = rnew (r) List ((int)c, lenmod);
          i++;
        }
      break;
    case 'l':
      lenmod = rnew (r) List ((int)c, lenmod);
      if (++i >= len)
        return NULL;
      c = s[i];
      if (c == 'l')
        {
          lenmod = rnew (r) List ((int)c, lenmod);
          i++;
        }
      break;
    case 'j':
    case 'z':
    case 't':
    case 'L':
      lenmod = rnew (r) List ((int)c, lenmod);
      i++;
      break;
    default:
      break;
    }
  if (i >= len)
    return NULL;
  lenmod = imp_rev (lenmod); // unnecessary

  // Parse conversion specifier
  c = s[i]; // not redundant
  switch (c)
    {
    case 'd':
    case 'i':
    case 'o':
    case 'u':
    case 'x':
    case 'X':
    case 'f':
    case 'F':
    case 'e':
    case 'E':
    case 'g':
    case 'G':
    case 'a':
    case 'A':
    case 'c':
    case 's':
    case 'p':
    case 'n':
    case '%':
      break;
    default:
      return NULL;
    }
#if 0
  fprintf (cyc_stderr,
           "Flags: %s\n"
           "Width: %s\n"
           "Precision: %s\n"
           "Lenmod: %s\n",
           implode (flags),
           implode (width),
           implode (precision),
           implode (lenmod));
#endif
  return rnew (r) ConversionSpecification {
    flags,
    width,
    precision,
    lenmod,
    c,
    i + 1
  };
}

list_t<type_t>
get_format_types (Tcenv::tenv_t te, string_t s, bool isCproto, seg_t loc)
{
  // FIX: on error we return NULL.  This will probably lead to
  // cascading errors (e.g., too many arguments to printf).
  let len = strlen (s);
  let typs = NULL;
  int i;

  region temp;
  for (i = 0; i < len; i++)
    {
      if (s[i] != '%')
        continue;
      let cs = parse_conversion_specification (temp, s, i + 1);
      if (cs == NULL)
        return err_null (loc, "bad format string");  // bad conversion spec
      let $(flags, width, precision, lenmod, c, j) = *cs;
      i = j - 1; // Subtract 1 because for-loop ends with i++
      switch (lenmod)
        {
        case &List (x, NULL) && (x == 'j' || x == 'z' || x == 't'):
          // These length modifiers are OK in C99 but we don't support them yet
          // FIX: is this true now?
          return err_null (loc, "length modifier '%c' is not supported", x);
        default:
          break;
        }
      switch (width)
        {
        case &List (x, NULL) && x == '*':
          typs = new List (sint_type, typs);
          break;
        default:
          break;
        }
      switch (precision)
        {
        case &List (x, &List (y, NULL)) && x == '.' && y == '*':
          typs = new List (sint_type, typs);
          break;
        default:
          break;
        }
      type_t t;
      switch (c)
        {
        case 'd':
        case 'i':
          for (_ f = flags; f != NULL; f = f->tl)
            if (f->hd == '#')
              return err_null (loc, "flag '#' is not valid with %%%c", c);
          switch (lenmod)
            {
            case NULL:                          t = sint_type  ; break;
            case &List (x, NULL)
                     && x == 'l':               t = slong_type ; break;
            case &List (x, NULL)
                     && x == 'h':               t = sshort_type; break;
            case &List (x, &List (y, NULL))
                     && x == 'h' && y == 'h':	t = schar_type ; break;
            default: // We don't support ll
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          typs = new List (t, typs);
          break;
        case 'u':
          for (_ f = flags; f != NULL; f = f->tl)
            if (f->hd == '#')
              return err_null (loc, "Flag '#' not valid with %%u");
          fallthru;
        case 'o':
        case 'x':
        case 'X':
          switch (lenmod)
            {
            case NULL: 				t = uint_type  ; break;
            case &List (x, NULL)
                    && x == 'l': 		t = ulong_type ; break;
            case &List (x, NULL)
                    && x == 'h': 		t = ushort_type; break;
            case &List (x, &List (y, NULL))
                    && x == 'h' && y == 'h': 	t = uchar_type ; break;
            // We don't support ll
            default:
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          typs = new List (t, typs);
          break;
        case 'f':
        case 'F':
        case 'e':
        case 'E':
        case 'g':
        case 'G':
        case 'a':
        case 'A':
          // We don't allow any length modifiers for floating point numbers;
          // in particular, we don't allow L (long double)
#if 0
          if (lenmod != NULL)
            {
              terr (loc, "length modifiers are not allowed with %%%c", c);
              return NULL;
            }
#endif
          switch (lenmod)
            {
            case NULL:
              typs = new List (double_type, typs);
              break;
            case &List (x, NULL) && x == 'l':
              typs = new List (long_double_type, typs);
              break;
            default:
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          break;
        case 'c':
          for (_ f = flags; f != NULL; f = f->tl)
            if (f->hd == '#' || f->hd == '0')
              return err_null (loc, "flag '%c' not allowed with %%c", f->hd);
          // We don't allow any length modifiers for characters;
          // in particular, we don't allow l (wint_t)
          if (lenmod != NULL)
            return err_null (loc, "length modifier '%s' not allowed with %%c",
                             implode (lenmod));
          if (precision != NULL)
            return err_null (loc, "precision '%s' not allowed with %%c",
                             implode (precision));
          typs = new List (sint_type, typs);
          break;
        case 's':
          // Only flag '-' is allowed for %s
          for (_ f = flags; f != NULL; f = f->tl)
            if (f->hd != '-')
              return err_null (loc, "a flag not allowed with %%s");
          // We don't allow any length modifiers for %s;
          // in particular, we don't allow l (wchar_t[?])
          if (lenmod != NULL)
            return err_null (loc, "length modifiers not allowed with %%s");
          // We make this a buffer_t (i.e., NOZEROTERM) because more things
          // will then match, but only if Cyclone vararg function
          type_t ptr;
          let tvs = Tcenv::lookup_type_vars (te);
          if (!isCproto)
            ptr = fatptr_type (char_type,
                               new_evar (&Kinds::eko, new Opt (tvs)),
                               al_qual_type,
                               const_tqual (0),
                               false_type,
                               Tcutil::any_bool (tvs));
          else
            ptr = at_type (char_type,
                           new_evar (&Kinds::eko, new Opt (tvs)),
                           al_qual_type,
                           const_tqual (0),
                           true_type,
                           Tcutil::any_bool (tvs));
          typs = new List (ptr, typs);
          break;
        case 'p':
          // Note:  we require pointers to be cast to integers
          typs = new List (uint_type, typs);
          break;
        case 'n':
          for (_ f = flags; f != NULL; f = f->tl)
            if (f->hd == '#' || f->hd == '0')
              return err_null (loc, "flag '%c' not allowed with %%n", f->hd);
          if (precision != NULL)
            return err_null (loc, "precision '%s' not allowed with %%n",
                             implode (precision));
          let tvs = Tcenv::lookup_type_vars (te);
          switch (lenmod)
            {
            case NULL: 				t = sint_type  ; break;
            case &List (x, NULL)
                    && x == 'l': 		t = ulong_type ; break;
                                                // DAN: slong_type???
            case &List (x, NULL)
                    && x == 'h': 		t = sshort_type; break;
            case &List (x, &List (y, NULL))
                    && x == 'h' && y == 'h': 	t = schar_type ; break;
            default: // We don't support ll
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          t = at_type (t,
                       new_evar (&Kinds::eko, new Opt (tvs)),
                       al_qual_type,
                       empty_tqual (0),
                       false_type,
                       Tcutil::any_bool (tvs));
          typs = new List (t, typs);
          break;
        case '%':
          if (flags != NULL)
            return err_null (loc, "flags '%s' not allowed with %%%%",
                             implode (flags));
          if (width != NULL)
            return err_null (loc, "width '%s' not allowed with %%%%",
                             implode (width));
          if (precision != NULL)
            return err_null (loc, "precision '%s' not allowed with %%%%",
                             implode (precision));
          if (lenmod != NULL)
            return err_null (loc, "length modifier '%s' not allowed with %%%%",
                             implode (lenmod));
          break;
        default:
          return NULL;    // impossible
        }
    }

  return imp_rev (typs);
}


struct InputFormat<`r>
{
  bool suppress;
  list_t<int, `r> width;
  list_t<int, `r> lenmod;
  char c;
  int j;
};
typedef struct InputFormat<`r> *`r input_format_t<`r>;

// Parse a scanf conversion specification starting at index i in string s.
// s[i] should be the first character after the leading '%'.
// If there is an error, return NULL.
// Otherwise, return whether assignment should be suppressed (a bool),
// the width and length modifier (lists of ints [boxed chars]),
// the conversion specifier (a char),
// and the index of the character following the conversion specifier.
static input_format_t<`r>
parse_input_format (region_t<`r> r, string_t s, int i)
{
  let len = strlen (s);

  if (i < 0 || i >= len)
    return NULL;

  let suppress = false;
  let c = s[i];
  if (c == '*')
    {
      suppress = true;
      i++;
      if (i >= len)
        return NULL;
    }

  let width = NULL;
  for (; i < len; i++)
    {
      c = s[i];
      if (isdigit (c))
        width = rnew (r) List ((int)c, width);
      else
        break;
    }
  if (i >= len)
    return NULL;
  width = imp_rev (width);

  // Parse length modifier:
  //  ('h' | 'l' | 'j' | 'z' | 't' | 'L' | 'h' 'h' | 'l' 'l')
  let lenmod = NULL;
  c = s[i]; // not redundant
  switch (c)
    {
    case 'h':
      lenmod = rnew (r) List ((int)c, lenmod);
      i++;
      if (i >= len)
        return NULL;
      c = s[i];
      if (c == 'h')
        {
          lenmod = rnew (r) List ((int)c, lenmod);
          i++;
        }
      break;
    case 'l':
      lenmod = rnew (r) List ((int)c, lenmod);
      i++;
      if (i >= len)
        return NULL;
      c = s[i];
      if (c == 'l')
        {
          lenmod = rnew (r) List ((int)c, lenmod);
          i++;
        }
      break;
    case 'j':
    case 'z':
    case 't':
    case 'L':
      lenmod = rnew (r) List ((int)c, lenmod);
      i++;
      break;
    default:
      break;
    }
  if (i >= len)
    return NULL;
  lenmod = imp_rev (lenmod); // unnecessary

  // Parse conversion specifier
  c = s[i]; // not redundant
  switch (c)
    {
    case 'd':
    case 'i':
    case 'o':
    case 'u':
    case 'x':
    case 'X':
    case 'f':
    case 'F':
    case 'e':
    case 'E':
    case 'g':
    case 'G':
    case 'a':
    case 'A':
    case 'c':
    case 's':
    case 'p':
    case 'n':
    case '%':
      break;
    default:
      return NULL;
    }

  return rnew (r) InputFormat {
    suppress,
    width,
    lenmod,
    c,
    i + 1
  };
}

list_t<type_t>
get_scanf_types (Tcenv::tenv_t te, string_t s, bool isCproto, seg_t loc)
{
  // FIX: on error we return NULL.  This will probably lead to
  // cascading errors (e.g., too many arguments to scanf).
  let len = strlen (s);
  let typs = NULL;
  int i;

  region temp;
  for (i = 0; i < len; i++)
    {
      if (s[i] != '%')
        continue;
      let x = parse_input_format (temp, s, i + 1);
      if (x == NULL)
        return err_null (loc, "bad format string");  // bad conversion spec
      let $(suppress, width, lenmod, c, j) = *x;
      i = j - 1; // Subtract 1 because for-loop ends with i++
      switch (lenmod)
        {
        case &List (x, NULL) && (x == 'j' || x == 'z' || x == 't'):
          // These length modifiers are OK in C99 but we don't support them yet
          return err_null (loc, "length modifier '%c' is not supported", x);
        default:
          break;
        }
      if (suppress)
        continue;
      type_t t;
      switch (c)
        {
        case 'd':
        case 'i':
          let tvs = Tcenv::lookup_type_vars (te);
          switch (lenmod)
            {
            case NULL:                         	t = sint_type  ; break;
            case &List (x, NULL)
                    && x == 'l':             	t = slong_type ; break;
            case &List (x, NULL)
                    && x == 'h':             	t = sshort_type; break;
            case &List (x, &List (y, NULL))
                    && x == 'h' && y == 'h': 	t = schar_type ; break;
            default: // We don't support ll
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          t = at_type (t,
                       new_evar (&Kinds::eko, new Opt (tvs)),
                       al_qual_type,
                       empty_tqual (0),
                       false_type,
                       Tcutil::any_bool (tvs));
          typs = new List (t, typs);
          break;
        case 'u':
        case 'o':
        case 'x':
        case 'X':
          let tvs = Tcenv::lookup_type_vars (te);
          switch (lenmod)
            {
            case NULL:                        	t = uint_type  ; break;
            case &List (x, NULL)
                    && x == 'l':             	t = ulong_type ; break;
            case &List (x, NULL)
                    && x == 'h':             	t = ushort_type; break;
            case &List (x, &List (y, NULL))
                    && x == 'h' && y == 'h': 	t = uchar_type ; break;
            default: // We don't support ll
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          t = at_type (t,
                       new_evar (&Kinds::eko, new Opt (tvs)),
                       al_qual_type,
                       empty_tqual (0),
                       false_type,
                       Tcutil::any_bool (tvs));
          typs = new List (t, typs);
          break;
        case 'f':
        case 'F':
        case 'e':
        case 'E':
        case 'g':
        case 'G':
        case 'a':
        case 'A':
          let tvs = Tcenv::lookup_type_vars (te);
          switch (lenmod)
            {
            case NULL:           t = float_type ; break;
            // Note, %f means float in scanf, double in printf!!
            case &List (x, NULL)
                    && x == 'l': t = double_type; break;
            default: // We don't support L
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          t = at_type (t,
                       new_evar (&Kinds::eko, new Opt (tvs)),
                       al_qual_type,
                       empty_tqual (0),
                       false_type,
                       Tcutil::any_bool (tvs));
          typs = new List (t, typs);
          break;
        //JGM: need to fix and synch up with lib/scanf.cyc
        case 'c':
          let tvs = Tcenv::lookup_type_vars (te);
          type_t ptr;
          if (!isCproto)
            ptr = fatptr_type (char_type,
                               new_evar (&Kinds::eko, new Opt (tvs)),
                               al_qual_type,
                               empty_tqual (0),
                               false_type,
                               Tcutil::any_bool (tvs));
          else
            ptr = at_type (char_type,
                           new_evar (&Kinds::eko, new Opt (tvs)),
                           al_qual_type,
                           empty_tqual (0),
                           false_type,
                           Tcutil::any_bool (tvs));
          typs = new List (ptr, typs);
          break;
        case 's':
          let tvs = Tcenv::lookup_type_vars (te);
          // we use a mbuffer_t here because this matches more things.
          type_t ptr;
          if (!isCproto)
            ptr = fatptr_type (char_type,
                               new_evar (&Kinds::eko, new Opt (tvs)),
                               al_qual_type,
                               empty_tqual (0),
                               false_type,
                               Tcutil::any_bool (tvs));
          else
            ptr = at_type (char_type,
                           new_evar (&Kinds::eko, new Opt (tvs)),
                           al_qual_type,
                           empty_tqual (0),
                           true_type,
                           Tcutil::any_bool (tvs));
          typs = new List (ptr, typs);
          break;
        case '[':
        case 'p':
          return err_null (loc, "%%%c is not supported", c);
        case 'n':
          let tvs = Tcenv::lookup_type_vars (te);
          switch (lenmod)
            {
            case NULL:                          t = sint_type; break;
            case &List (x, NULL)
                    && x == 'l':                t = ulong_type; break;
                                                // DAN: slong_type???
            case &List (x, NULL)
                     && x == 'h':               t = sshort_type; break;
            case &List (x, &List (y, NULL))
                     && x == 'h' && y == 'h': 	t = schar_type; break;
            default: // We don't support ll
              return err_null (loc, "length modifier '%s' is not allowed with %%%c",
                               implode (lenmod), c);
            }
          t = at_type (t,
                       new_evar (&Kinds::eko, new Opt (tvs)),
                       al_qual_type,
                       empty_tqual (0),
                       false_type,
                       Tcutil::any_bool (tvs));

          typs = new List (t, typs);
          break;
        case '%':
          if (suppress)
            return err_null (loc, "Assignment suppression (*) is not allowed with %%%%");
          if (width != NULL)
            return err_null (loc, "width '%s' not allowed with %%%%", implode (width));
          if (lenmod != NULL)
            return err_null (loc, "length modifier '%s' not allowed with %%%%",
                             implode (lenmod));
          break;
        default:
          return NULL;  // impossible
        }
    }

  return imp_rev (typs);
}
